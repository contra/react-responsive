{"version":3,"sources":["../src/index.js"],"names":["React","matchMedia","hyphenate","mediaQuery","toQuery","defaultTypes","component","PropTypes","node","query","string","values","shape","matchers","children","oneOfType","function","mediaKeys","all","excludedQueryKeys","excludedPropKeys","concat","omit","object","keys","newObject","forEach","key","MediaQuery","state","matches","updateMatches","_mql","setState","updateQuery","props","nextProps","Error","reduce","result","removeListener","addListener","hasMergeProps","length","childrenCount","Children","count","wrapChildren","Array","isArray","undefined","createElement","cloneElement","Component","displayName","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react'\nimport matchMedia from 'matchmedia'\nimport hyphenate  from 'hyphenate-style-name'\nimport mediaQuery from './mediaQuery'\nimport toQuery  from './toQuery'\n\n\nconst defaultTypes = {\n  component: React.PropTypes.node,\n  query: React.PropTypes.string,\n  values: React.PropTypes.shape(mediaQuery.matchers),\n  children: React.PropTypes.oneOfType([ React.PropTypes.node, React.PropTypes.function ])\n}\nconst mediaKeys = Object.keys(mediaQuery.all)\nconst excludedQueryKeys = Object.keys(defaultTypes)\nconst excludedPropKeys = excludedQueryKeys.concat(mediaKeys)\n\nfunction omit(object, keys) {\n  const newObject = { ...object }\n  keys.forEach(key => delete newObject[key])\n  return newObject\n}\n\nexport default class MediaQuery extends React.Component {\n  static displayName = 'MediaQuery'\n  static defaultProps = {\n    values: {}\n  }\n\n  state = { matches: false }\n\n  componentWillMount() {\n    this.updateQuery(this.props)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.updateQuery(nextProps)\n  }\n\n  updateQuery(props) {\n    let values\n    if (props.query) {\n      this.query = props.query\n    } else {\n      this.query = toQuery(omit(props, excludedQueryKeys))\n    }\n\n    if (!this.query) {\n      throw new Error('Invalid or missing MediaQuery!')\n    }\n\n    if (props.values) {\n      values = Object.keys(props.values)\n        .reduce(function (result, key) {\n          result[hyphenate(key)] = props.values[key]\n          return result\n        }, {})\n    }\n\n    if (this._mql) {\n      this._mql.removeListener(this.updateMatches)\n    }\n\n    this._mql = matchMedia(this.query, values)\n    this._mql.addListener(this.updateMatches)\n    this.updateMatches()\n  }\n\n\n  componentWillUnmount() {\n    this._mql.removeListener(this.updateMatches)\n  }\n\n  updateMatches = () => {\n    if (this._mql.matches === this.state.matches) {\n      return\n    }\n    this.setState({\n      matches: this._mql.matches\n    })\n  }\n\n  render() {\n    if(typeof this.props.children === 'function') {\n      return this.props.children(this.state.matches)\n    }\n\n    if (this.state.matches === false) {\n      return null\n    }\n    const props = omit(this.props, excludedPropKeys)\n    const hasMergeProps = Object.keys(props).length > 0\n    const childrenCount = React.Children.count(this.props.children)\n    const wrapChildren = this.props.component ||\n      childrenCount > 1 ||\n      typeof this.props.children === 'string' ||\n      Array.isArray(this.props.children) && childrenCount == 1 ||\n      this.props.children === undefined\n    if (wrapChildren) {\n      return React.createElement(\n        this.props.component || 'div',\n        props,\n        this.props.children\n      )\n    } else if (hasMergeProps) {\n      return React.cloneElement(\n        this.props.children,\n        props\n      )\n    } else if (childrenCount) {\n      return this.props.children\n    }\n    else {\n      return null\n    }\n  }\n}\n"]}