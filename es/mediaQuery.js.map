{"version":3,"sources":["../src/mediaQuery.js"],"names":["PropTypes","stringOrNumber","oneOfType","string","number","matchers","orientation","oneOf","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","bool","colorIndex","monochrome","resolution","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","types","all","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","type"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,IAAMC,iBAAiBD,UAAUE,SAAV,CAAoB,CACzCF,UAAUG,MAD+B,EAEzCH,UAAUI,MAF+B,CAApB,CAAvB;;AAKA;AACA,IAAMC,WAAW;AACfC,eAAaN,UAAUO,KAAV,CAAgB,CAC3B,UAD2B,EAE3B,WAF2B,CAAhB,CADE;;AAMfC,QAAMR,UAAUO,KAAV,CAAgB,CACpB,aADoB,EAEpB,WAFoB,CAAhB,CANS;;AAWfE,eAAaT,UAAUG,MAXR;AAYfO,qBAAmBV,UAAUG,MAZd;;AAcfQ,UAAQV,cAdO;AAefW,gBAAcX,cAfC;;AAiBfY,SAAOZ,cAjBQ;AAkBfa,eAAab,cAlBE;;AAoBfc,SAAOf,UAAUgB,IApBF;;AAsBfC,cAAYjB,UAAUgB,IAtBP;;AAwBfE,cAAYlB,UAAUgB,IAxBP;AAyBfG,cAAYlB;AAzBG,CAAjB;;AA4BA;AACA,IAAMmB;AACJC,kBAAgBrB,UAAUG,MADtB;AAEJmB,kBAAgBtB,UAAUG,MAFtB;AAGJoB,wBAAsBvB,UAAUG,MAH5B;AAIJqB,wBAAsBxB,UAAUG,MAJ5B;;AAMJsB,aAAWxB,cANP;AAOJyB,aAAWzB,cAPP;AAQJ0B,mBAAiB1B,cARb;AASJ2B,mBAAiB3B,cATb;;AAWJ4B,YAAU5B,cAXN;AAYJ6B,YAAU7B,cAZN;AAaJ8B,kBAAgB9B,cAbZ;AAcJ+B,kBAAgB/B,cAdZ;;AAgBJgC,YAAUjC,UAAUI,MAhBhB;AAiBJ8B,YAAUlC,UAAUI,MAjBhB;;AAmBJ+B,iBAAenC,UAAUI,MAnBrB;AAoBJgC,iBAAepC,UAAUI,MApBrB;;AAsBJiC,iBAAerC,UAAUI,MAtBrB;AAuBJkC,iBAAetC,UAAUI,MAvBrB;;AAyBJmC,iBAAetC,cAzBX;AA0BJuC,iBAAevC;;AA1BX,GA4BDI,QA5BC,CAAN;;AA+BA;AACA,IAAMoC,QAAQ;AACZC,OAAK1C,UAAUgB,IADH;AAEZ2B,QAAM3C,UAAUgB,IAFJ;AAGZ4B,SAAO5C,UAAUgB,IAHL;AAIZ6B,WAAS7C,UAAUgB,IAJP;AAKZ8B,YAAU9C,UAAUgB,IALR;AAMZ+B,SAAO/C,UAAUgB,IANL;AAOZgC,cAAYhD,UAAUgB,IAPV;AAQZiC,UAAQjD,UAAUgB,IARN;AASZkC,OAAKlD,UAAUgB,IATH;AAUZmC,MAAInD,UAAUgB,IAVF;AAWZoC,YAAUpD,UAAUgB;AAXR,CAAd;;AAcA,IAAM0B,mBAAWD,KAAX,EAAqBrB,QAArB,CAAN;;AAEA;AACAf,SAASgD,IAAT,GAAgB,aAAYZ,KAAZ,CAAhB;;AAEA,eAAe;AACbC,OAAKA,GADQ;AAEbD,SAAOA,KAFM;AAGbpC,YAAUA,QAHG;AAIbe,YAAUA;AAJG,CAAf","file":"mediaQuery.js","sourcesContent":["import { PropTypes } from 'react'\n\nconst stringOrNumber = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number\n])\n\n// properties that match media queries\nconst matchers = {\n  orientation: PropTypes.oneOf([\n    'portrait',\n    'landscape'\n  ]),\n\n  scan: PropTypes.oneOf([\n    'progressive',\n    'interlace'\n  ]),\n\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n\n  color: PropTypes.bool,\n\n  colorIndex: PropTypes.bool,\n\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber\n}\n\n// media features\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n\n  ...matchers\n}\n\n// media types\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n}\n\nconst all = { ...types, ...features }\n\n// add the type property\nmatchers.type = Object.keys(types)\n\nexport default {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n}\n"]}